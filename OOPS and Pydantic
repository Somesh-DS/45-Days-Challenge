{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyORXXSqqFdmL6ieMGSD7p5w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Somesh-DS/45-Days-Challenge/blob/main/AI_Research_Assistant_Chatbot.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Theory: Object-Oriented Programming (OOPS)\n",
        "OOPS is a programming paradigm that organizes code into objects, which are instances of classes. It’s like building a blueprint (class) and creating real-world items (objects) from it. For your chatbot, OOPS helps structure the code modularly, making it reusable and maintainable (e.g., a ResearchBot class to handle queries).\n",
        "\n"
      ],
      "metadata": {
        "id": "FKpcIl_qxWwk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Classes**\n",
        "\n",
        "Definition: A class is a blueprint for creating objects. It defines attributes (data) and methods (functions) that describe what an object can store and do.\n",
        "\n",
        "Analogy: Think of a class as a recipe for a dish. The recipe (class) lists ingredients (attributes) and steps (methods). Each dish you make (object) follows the recipe."
      ],
      "metadata": {
        "id": "3WRjZAEuxcsc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "TqAaSCi8p9hp"
      },
      "outputs": [],
      "source": [
        "class ResearchBot:\n",
        "    def __init__(self):\n",
        "        self.model = \"gpt-4o-mini\"  # Attribute\n",
        "    def answer_query(self, query):  # Method\n",
        "        return f\"Processing {query} with {self.model}\""
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Objects**\n",
        "\n",
        "Definition: An object is an instance of a class. It’s the actual “thing” created from the class blueprint, with its own data.\n",
        "\n",
        "Analogy: If ResearchBot is the recipe, an object is a specific dish made from it, like “Chatbot A for AI queries.”"
      ],
      "metadata": {
        "id": "0ZvvQPgczFQb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bot = ResearchBot()  # Create object\n",
        "response = bot.answer_query(\"What is AI?\")  # Use object\n",
        "print(response)  # Output: Processing What is AI? with gpt-4o-mini"
      ],
      "metadata": {
        "id": "wmNjjPdIzL7R",
        "outputId": "8f32e887-16bf-4516-8159-9760b10f3498",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Processing What is AI? with gpt-4o-mini\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3. self**\n",
        "\n",
        "Definition: self refers to the specific object (instance) calling a method. It’s used to access the object’s attributes and methods within the class.\n",
        "\n",
        "Analogy: Imagine self as a way for the chatbot to say, “Hey, I’m talking about myself!” when accessing its own data."
      ],
      "metadata": {
        "id": "oBpEg8WRzTwg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ResearchBot:\n",
        "    def __init__(self):\n",
        "        self.model = \"gpt-4o-mini\"\n",
        "    def answer_query(self, query):\n",
        "        return f\"Processing {query} with {self.model}\"  # self accesses model\n",
        "bot = ResearchBot()\n",
        "print(bot.answer_query(\"What is AI?\"))  # self = bot"
      ],
      "metadata": {
        "id": "ljRtEa_3zZyc",
        "outputId": "7173c6b4-e53c-43ce-fa50-8d5c731d526d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Processing What is AI? with gpt-3.5-turbo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4. Inheritance**\n",
        "\n",
        "Definition: Inheritance lets a class (child) inherit attributes and methods from another class (parent), promoting code reuse.\n",
        "\n",
        "Analogy: If ResearchBot is a general chatbot, a child class AdvancedResearchBot could inherit its features and add specialized ones, like handling research papers."
      ],
      "metadata": {
        "id": "CCSs11yrzs6G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ResearchBot:\n",
        "    def __init__(self):\n",
        "        self.model = \"gpt-4o-mini\"\n",
        "    def answer_query(self, query):\n",
        "        return f\"Basic answer: {query}\"\n",
        "\n",
        "class AdvancedResearchBot(ResearchBot):  # Inherits from ResearchBot\n",
        "    def answer_query(self, query):\n",
        "        basic_answer = super().answer_query(query)  # Call parent method\n",
        "        return f\"{basic_answer} with advanced analysis\"\n",
        "bot = AdvancedResearchBot()\n",
        "print(bot.answer_query(\"What is AI?\"))  # Output: Basic answer: What is AI? with advanced analysis"
      ],
      "metadata": {
        "id": "HeBH1fbr0cvy",
        "outputId": "9d578f6f-20e2-4eec-c0c0-9c544bf56569",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Basic answer: What is AI? with advanced analysis\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5. Polymorphism**\n",
        "\n",
        "Definition: Polymorphism allows different classes to share the same method name but implement it differently. It’s like different chatbots responding to queries in unique ways.\n",
        "\n",
        "Analogy: Both a dog and a cat can “speak,” but a dog barks and a cat meows—same method, different behavior."
      ],
      "metadata": {
        "id": "dcUbrphx03aP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ResearchBot:\n",
        "    def answer_query(self, query):\n",
        "        return f\"General: {query}\"\n",
        "class MedicalResearchBot(ResearchBot):\n",
        "    def answer_query(self, query):\n",
        "        return f\"Medical: {query} with PubMed data\"\n",
        "bots = [ResearchBot(), MedicalResearchBot()]\n",
        "for bot in bots:\n",
        "    print(bot.answer_query(\"What is AI?\"))\n",
        "# Output:\n",
        "# General: What is AI?\n",
        "# Medical: What is AI? with PubMed data"
      ],
      "metadata": {
        "id": "b4YVuwke3hhp",
        "outputId": "7d741529-30e7-4348-866c-5889d6d23c7c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "General: What is AI?\n",
            "Medical: What is AI? with PubMed data\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**6. Encapsulation**\n",
        "\n",
        "Definition: Encapsulation hides a class’s internal data and exposes only what’s necessary through methods, protecting data integrity.\n",
        "\n",
        "Analogy: Think of ResearchBot as a black box: users can call answer_query but can’t mess with the internal model directly."
      ],
      "metadata": {
        "id": "kBBfpvWu35Ep"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ResearchBot:\n",
        "    def __init__(self):\n",
        "        self._model = \"gpt-4o-mini\"  # Protected attribute\n",
        "    def get_model(self):  # Public method\n",
        "        return self._model\n",
        "    def set_model(self, model):  # Controlled access\n",
        "        if model in [\"gpt-4o-mini\", \"gpt-4\"]:\n",
        "            self._model = model\n",
        "        else:\n",
        "            raise ValueError(\"Invalid model\")\n",
        "bot = ResearchBot()\n",
        "print(bot.get_model())  # Output: gpt-4o-mini\n",
        "bot.set_model(\"gpt-4\")  # Works\n",
        "# bot._model = \"invalid\"  # Bad practice, but possible; use methods instead"
      ],
      "metadata": {
        "id": "tBapSzTb38KP",
        "outputId": "5afd4a52-3aa1-4008-ea7e-4a34f2d1b4c6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gpt-4o-mini\n"
          ]
        }
      ]
    }
  ]
}
